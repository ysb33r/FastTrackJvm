
buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.ysb33r.gradle:vfs-gradle-plugin:1.0-beta6"
        classpath "com.github.jruby-gradle:jruby-gradle-plugin:1.1.4"
        classpath "commons-httpclient:commons-httpclient:3.1"

    }
}



apply plugin : 'groovy'
apply plugin : 'org.asciidoctor.convert'
apply plugin : 'org.ysb33r.vfs'
apply plugin : 'com.github.jruby-gradle.base'

ext {
    downloadDir = new File(buildDir,'download')

    revealjsVersion = 'master'
    revealjsTemplateVersion = 'master'
    revealjsDir = new File(downloadDir,'reveal.js')
    revealjsTemplateDir = new File(downloadDir,'revealjs-backends/revealjs')

    examplesDir = file("${buildDir}/examples")

    groovyVer = '2.4.3'
    spockVer = '1.0-groovy-2.4'
}


dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyVer}"
    testCompile "org.spockframework:spock-core:${spockVer}", {
        exclude module : 'groovy-all'
    }
    // tag::spockreports[]
    testCompile 'com.athaydes:spock-reports:1.2.10', {
        transitive = false
    }
    testCompile 'org.slf4j:slf4j-api:1.7.13'
    testCompile 'org.slf4j:slf4j-simple:1.7.13'
    // tag::spockreports[]
}

task download << {
    mkdir downloadDir
    vfs {
        if(!revealjsDir.exists()) {
            cp "zip:https://github.com/hakimel/reveal.js/archive/${revealjsVersion}.zip!reveal.js-${revealjsVersion}",
                revealjsDir, recursive: true, overwrite: true
        }
        if(!revealjsTemplateDir.exists()) {
            cp "zip:https://github.com/ysb33r/asciidoctor-reveal.js/archive/${revealjsTemplateVersion}.zip!asciidoctor-reveal.js-${revealjsTemplateVersion}/templates/slim",
                revealjsTemplateDir, recursive: true, overwrite: true
        }

    }

}

download {
    outputs.dir revealjsDir
    outputs.dir revealjsTemplateDir
}

asciidoctor {

//    requires 'asciidoctor-diagram'
//    inputs.dir 'src/gradleTest/codeSnippets/src'
    inputs.dir 'src/docs/asciidoc'

    sources {
        include 'cool-tools.adoc'
        include 'gr8-universe.adoc'
    }

    resources {
        from('src/docs/asciidoc') {
            include 'images/**'
            include 'stylesheets/**'
        }
        from("${outputDir}/generated-images") {
            include '**.png'
        }
        from (downloadDir) {
            include 'reveal.js/**'
        }
    }

    backends 'revealjs'
    options template_dirs : [ revealjsTemplateDir.parentFile.absolutePath ]

    attributes 'source-highlighter': 'coderay',
        'asciidoctorj' : asciidoctorj.version

    dependsOn download, test

    doLast {
        fileTree(outputDir) {
            include '**/*.html'
        }.files.each {
            it.text = it.text.replaceAll(/src="diag-/,'src="images/diag-')
        }
    }

}

